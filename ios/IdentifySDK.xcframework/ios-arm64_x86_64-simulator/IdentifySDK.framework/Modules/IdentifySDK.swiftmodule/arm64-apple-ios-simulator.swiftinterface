// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IdentifySDK
import CoreImage.CIFilterBuiltins
import Combine
import CommonCrypto
import CoreImage
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Dispatch
import Foundation
import MobileCoreServices
import OpenSSL
import Security
import Starscream
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import Vision
import WebRTC
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_hasMissingDesignatedInitializers public class SDKNetworkOptions {
  public var timeoutIntervalForRequest: Swift.Int?
  public var timeoutIntervalForResource: Swift.Int?
  public var useSslPinning: Swift.Bool?
  public init(timeoutIntervalForRequest: Swift.Int?, timeoutIntervalForResource: Swift.Int?, useSslPinning: Swift.Bool?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: any Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: any Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: any Swift.Error)
    case inputStreamReadFailed(error: any Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: any Swift.Error)
    case customEncodingFailed(error: any Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(IdentifySDK.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: any Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: any Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: any Swift.Error)
    case decodingFailed(error: any Swift.Error)
    case customSerializationFailed(error: any Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: (any Swift.Error)?)
    case defaultEvaluationFailed(output: IdentifySDK.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: IdentifySDK.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: IdentifySDK.AFError.ServerTrustFailureReason.Output, options: IdentifySDK.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: any Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: any Swift.Error)
  case createURLRequestFailed(error: any Swift.Error)
  case downloadedFileMoveFailed(error: any Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: any IdentifySDK.URLConvertible)
  case multipartEncodingFailed(reason: IdentifySDK.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: IdentifySDK.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: IdentifySDK.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: any Swift.Error)
  case requestRetryFailed(retryError: any Swift.Error, originalError: any Swift.Error)
  case responseValidationFailed(reason: IdentifySDK.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: IdentifySDK.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: IdentifySDK.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: (any Swift.Error)?)
  case sessionTaskFailed(error: any Swift.Error)
  case urlRequestValidationFailed(reason: IdentifySDK.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: IdentifySDK.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> IdentifySDK.AFError
}
extension IdentifySDK.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension IdentifySDK.AFError {
  public var urlConvertible: (any IdentifySDK.URLConvertible)? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: (any Swift.Error)? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension IdentifySDK.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: IdentifySDK.Request.State, b: IdentifySDK.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: (any IdentifySDK.EventMonitor)?
  final public let interceptor: (any IdentifySDK.RequestInterceptor)?
  weak public var delegate: (any IdentifySDK.RequestDelegate)? {
    get
  }
  public var state: IdentifySDK.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var uploadProgressHandler: (handler: IdentifySDK.Request.ProgressHandler, queue: Dispatch.DispatchQueue)? {
    get
  }
  public var downloadProgressHandler: (handler: IdentifySDK.Request.ProgressHandler, queue: Dispatch.DispatchQueue)? {
    get
  }
  public var redirectHandler: (any IdentifySDK.RedirectHandler)? {
    get
  }
  public var cachedResponseHandler: (any IdentifySDK.CachedResponseHandler)? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: IdentifySDK.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping IdentifySDK.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping IdentifySDK.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: any IdentifySDK.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: any IdentifySDK.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension IdentifySDK.Request {
  public enum ResponseDisposition {
    case allow
    case cancel
    public static func == (a: IdentifySDK.Request.ResponseDisposition, b: IdentifySDK.Request.ResponseDisposition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension IdentifySDK.Request : Swift.Equatable {
  public static func == (lhs: IdentifySDK.Request, rhs: IdentifySDK.Request) -> Swift.Bool
}
extension IdentifySDK.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension IdentifySDK.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IdentifySDK.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: IdentifySDK.Request)
  func retryResult(for request: IdentifySDK.Request, dueTo error: IdentifySDK.AFError, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
  func retryRequest(_ request: IdentifySDK.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@available(iOS 13, *)
public class SDKNfcReader {
  public init()
  @objc deinit
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : IdentifySDK.ParameterEncoder {
  public static var `default`: IdentifySDK.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: IdentifySDK.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: IdentifySDK.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension IdentifySDK.ParameterEncoder where Self == IdentifySDK.JSONParameterEncoder {
  public static var json: IdentifySDK.JSONParameterEncoder {
    get
  }
  public static func json(encoder: Foundation.JSONEncoder = JSONEncoder()) -> IdentifySDK.JSONParameterEncoder
}
open class URLEncodedFormParameterEncoder : IdentifySDK.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: IdentifySDK.URLEncodedFormParameterEncoder.Destination, b: IdentifySDK.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: IdentifySDK.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: IdentifySDK.URLEncodedFormEncoder
  final public let destination: IdentifySDK.URLEncodedFormParameterEncoder.Destination
  public init(encoder: IdentifySDK.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: IdentifySDK.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension IdentifySDK.ParameterEncoder where Self == IdentifySDK.URLEncodedFormParameterEncoder {
  public static var urlEncodedForm: IdentifySDK.URLEncodedFormParameterEncoder {
    get
  }
  public static func urlEncodedForm(encoder: IdentifySDK.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: IdentifySDK.URLEncodedFormParameterEncoder.Destination = .methodDependent) -> IdentifySDK.URLEncodedFormParameterEncoder
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static let connect: IdentifySDK.HTTPMethod
  public static let delete: IdentifySDK.HTTPMethod
  public static let get: IdentifySDK.HTTPMethod
  public static let head: IdentifySDK.HTTPMethod
  public static let options: IdentifySDK.HTTPMethod
  public static let patch: IdentifySDK.HTTPMethod
  public static let post: IdentifySDK.HTTPMethod
  public static let put: IdentifySDK.HTTPMethod
  public static let query: IdentifySDK.HTTPMethod
  public static let trace: IdentifySDK.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [IdentifySDK.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: IdentifySDK.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: IdentifySDK.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> IdentifySDK.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension IdentifySDK.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension IdentifySDK.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: IdentifySDK.HTTPHeader...)
  public typealias ArrayLiteralElement = IdentifySDK.HTTPHeader
}
extension IdentifySDK.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[IdentifySDK.HTTPHeader]>
}
extension IdentifySDK.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> IdentifySDK.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = IdentifySDK.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<IdentifySDK.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[IdentifySDK.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<IdentifySDK.HTTPHeaders>
}
extension IdentifySDK.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: IdentifySDK.HTTPHeader, b: IdentifySDK.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IdentifySDK.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IdentifySDK.HTTPHeader {
  public static func accept(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> IdentifySDK.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> IdentifySDK.HTTPHeader
  public static func authorization(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func contentEncoding(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func contentType(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> IdentifySDK.HTTPHeader
  public static func websocketProtocol(_ value: Swift.String) -> IdentifySDK.HTTPHeader
}
extension IdentifySDK.HTTPHeaders {
  public static let `default`: IdentifySDK.HTTPHeaders
}
extension IdentifySDK.HTTPHeader {
  public static let defaultAcceptEncoding: IdentifySDK.HTTPHeader
  public static let defaultAcceptLanguage: IdentifySDK.HTTPHeader
  public static let defaultUserAgent: IdentifySDK.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: IdentifySDK.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: IdentifySDK.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: IdentifySDK.HTTPHeaders {
    get
    set
  }
}
public typealias AFResult<Success> = Swift.Result<Success, IdentifySDK.AFError>
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : IdentifySDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : IdentifySDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : IdentifySDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension IdentifySDK.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : IdentifySDK.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod, headers: IdentifySDK.HTTPHeaders? = nil) throws
}
public enum UploadImgType : Swift.String, Swift.Codable {
  case uploadIdFront
  case uploadIdBack
  case uploadSelfie
  case uploadSignature
  case validateAddress
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OCRType : Swift.String, Swift.Codable {
  case frontId
  case backId
  case passport
  case document
  case selfie
  case signature
  case blinking
  case smiling
  case headToRight
  case headToLeft
  case idPortrait
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppType : Swift.String, Swift.Codable {
  case onlySDK
  case demoApp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKType : Swift.Int, Swift.Codable {
  case fullProcess
  case withoutCall
  case onlyCall
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HostType : Swift.String, Swift.Codable {
  case identifyTr
  case custom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SdkModules : Swift.String, Swift.Codable {
  case login
  case nfc
  case livenessDetection
  case waitScreen
  case selfie
  case videoRecord
  case idCard
  case signature
  case speech
  case addressConf
  case thankU
  case prepare
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SelfieTypes : Swift.String, Swift.Codable {
  case selfie
  case oldPhoneFace
  case video
  case backId
  case frontId
  case signature
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppQuitType : Swift.String {
  case restartModules
  case onlyCall
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKLogLevel : Swift.String {
  case noLog
  case all
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VerificationCardType : Swift.String {
  case onlyIdCard
  case all
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKLang : Swift.String {
  case de
  case eng
  case tr
  case az
  case ru
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CardType : Swift.String {
  case idCard
  case passport
  case oldSchool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LivenessTestStep : Swift.String {
  case turnLeft
  case turnRight
  case blinkEyes
  case smile
  case completed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKCallActions {
  case incomingCall
  case endCall
  case comingSms
  case approveSms(Swift.Bool)
  case openWarningCircle
  case closeWarningCircle
  case openCardCircle
  case closeCardCircle
  case terminateCall
  case imOffline
  case updateQueue(Swift.String, Swift.String)
  case photoTaken(Swift.String)
  case subrejectedDismiss(Swift.String)
  case subscribed
  case openNfcRemote(Swift.String, Swift.String, Swift.String)
  case startTransfer
  case networkQuality(Swift.String)
  case missedCall
  case editNfcProcess
  case connectionErr
  case wrongSocketActionErr(Swift.String)
}
@_hasMissingDesignatedInitializers public class SDKNetworkSpeedTestResponse {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: IdentifySDK.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping IdentifySDK.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus, b: IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension IdentifySDK.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
}
extension IdentifySDK.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension IdentifySDK.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.SessionDelegate : Foundation.URLSessionWebSocketDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
}
extension IdentifySDK.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
public protocol IdentifyListenerDelegate : AnyObject {
  func incomingCall()
  func endCall()
  func comingSms()
  func openNFC()
  func skipNFC()
  func approvedSms(stats: Swift.Bool)
  func openWarningCircle()
  func closeWarningCircle()
  func openCardCircle()
  func closeCardCircle()
  func terminateCall()
  func imOffline()
  func updateQueue(countMember: Swift.String, minutes: Swift.String)
  func photoTaken(message: Swift.String)
  func subrejectedDismiss()
  func subscribed()
  func openNfcRemote(birthDate: Swift.String, expireDate: Swift.String, serialNumber: Swift.String)
  func missedCall()
}
public protocol PopUpProtocol {
  func handlePopUpAction(action: Swift.Bool)
}
public protocol LoadingViewDelegate {
  func hideAllLoaders()
}
public protocol SDKSocketListener : AnyObject {
  func listenSocketMessage(message: IdentifySDK.SDKCallActions)
}
public protocol IdentifyManagerListener : AnyObject {
  func sdkResponse(stats: IdentifySDK.IdentifyListener)
}
@_hasMissingDesignatedInitializers public class IdentifyListener : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: IdentifySDK.PassportAuthenticationStatus, b: IdentifySDK.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var fullNamePassport: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var faceImageInfo: IdentifySDK.FaceImageInfo? {
    get
  }
  public var documentSigningCertificate: IdentifySDK.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: IdentifySDK.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [IdentifySDK.DataGroupId] {
    get
  }
  public var dataGroupsRead: [IdentifySDK.DataGroupId : IdentifySDK.DataGroup] {
    get
  }
  public var dataGroupHashes: [IdentifySDK.DataGroupId : IdentifySDK.DataGroupHash] {
    get
  }
  public var cardAccess: IdentifySDK.CardAccess? {
    get
  }
  public var BACStatus: IdentifySDK.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: IdentifySDK.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: IdentifySDK.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: IdentifySDK.DataGroupId, dataGroup: IdentifySDK.DataGroup)
  public func getDataGroup(_ id: IdentifySDK.DataGroupId) -> IdentifySDK.DataGroup?
  public func dumpPassportData(selectedDataGroups: [IdentifySDK.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [IdentifySDK.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataRequest : IdentifySDK.Request {
  final public let convertible: any IdentifySDK.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping IdentifySDK.DataRequest.Validation) -> Self
  @discardableResult
  @_disfavoredOverload public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (_ response: Foundation.HTTPURLResponse, _ completionHandler: @escaping (IdentifySDK.Request.ResponseDisposition) -> Swift.Void) -> Swift.Void) -> Self
  @discardableResult
  public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.HTTPURLResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (IdentifySDK.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (IdentifySDK.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : IdentifySDK.DataResponseSerializerProtocol
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (IdentifySDK.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : IdentifySDK.ResponseSerializer
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (IdentifySDK.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (IdentifySDK.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (IdentifySDK.AFDataResponse<Any>) -> Swift.Void) -> Self
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (IdentifySDK.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
  @objc deinit
}
public struct FaceImageInfo : Swift.Equatable {
  public enum Expression : Swift.Int {
    case unspecified
    case neutral
    case smileClosed
    case smileOpen
    case raisedEyebrows
    case eyesLookingAway
    case squinting
    case frowning
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.Expression?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum EyeColor : Swift.Int {
    case unspecified
    case black
    case blue
    case brown
    case gray
    case green
    case multiColored
    case pink
    case unknown
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.EyeColor?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum FaceImageType : Swift.Int {
    case basic
    case fullFrontal
    case tokenFrontal
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.FaceImageType?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Features : Swift.Int {
    case featuresAreSpecified
    case glasses
    case moustache
    case beard
    case teethVisible
    case blink
    case mouthOpen
    case leftEyePatch
    case rightEyePath
    case darkGlasses
    case distortingMedicalCondition
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.Features?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum HairColor : Swift.Int {
    case unspecified
    case bald
    case black
    case blonde
    case brown
    case gray
    case white
    case red
    case green
    case blue
    case unknown
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.HairColor?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ImageColorSpace : Swift.Int {
    case unspecified
    case rgb24
    case yuv422
    case gray8
    case other
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.ImageColorSpace?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ImageDataType : Swift.Int {
    case jpeg
    case jpeg2000
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.ImageDataType?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum SourceType : Swift.Int {
    case unspecified
    case staticPhotoUnknownSource
    case staticPhotoDigitalCam
    case staticPhotoScanner
    case videoFrameUnknownSource
    case videoFrameAnalogCam
    case videoFrameDigitalCam
    case unknown
    public static func from(_ code: Swift.Int) -> IdentifySDK.FaceImageInfo.SourceType?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func == (a: IdentifySDK.FaceImageInfo, b: IdentifySDK.FaceImageInfo) -> Swift.Bool
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    case custom((_ key: Swift.String, _ index: Swift.Int) -> Swift.String)
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: IdentifySDK.URLEncodedFormEncoder.BoolEncoding, b: IdentifySDK.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public struct KeyPathEncoding {
    public static let brackets: IdentifySDK.URLEncodedFormEncoder.KeyPathEncoding
    public static let dots: IdentifySDK.URLEncodedFormEncoder.KeyPathEncoding
    public init(encoding: @escaping (_ subkey: Swift.String) -> Swift.String)
  }
  public struct NilEncoding {
    public static let dropKey: IdentifySDK.URLEncodedFormEncoder.NilEncoding
    public static let dropValue: IdentifySDK.URLEncodedFormEncoder.NilEncoding
    public static let null: IdentifySDK.URLEncodedFormEncoder.NilEncoding
    public init(encoding: @escaping () -> Swift.String?)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: IdentifySDK.URLEncodedFormEncoder.SpaceEncoding, b: IdentifySDK.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: IdentifySDK.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: IdentifySDK.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: IdentifySDK.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: IdentifySDK.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: IdentifySDK.URLEncodedFormEncoder.KeyEncoding
  final public let keyPathEncoding: IdentifySDK.URLEncodedFormEncoder.KeyPathEncoding
  final public let nilEncoding: IdentifySDK.URLEncodedFormEncoder.NilEncoding
  final public let spaceEncoding: IdentifySDK.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: IdentifySDK.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: IdentifySDK.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: IdentifySDK.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: IdentifySDK.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: IdentifySDK.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, keyPathEncoding: IdentifySDK.URLEncodedFormEncoder.KeyPathEncoding = .brackets, nilEncoding: IdentifySDK.URLEncodedFormEncoder.NilEncoding = .dropKey, spaceEncoding: IdentifySDK.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: any Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: any Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : IdentifySDK.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: IdentifySDK.ResponseCacher
  public static let doNotCache: IdentifySDK.ResponseCacher
  public let behavior: IdentifySDK.ResponseCacher.Behavior
  public init(behavior: IdentifySDK.ResponseCacher.Behavior)
}
extension IdentifySDK.ResponseCacher : IdentifySDK.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension IdentifySDK.CachedResponseHandler where Self == IdentifySDK.ResponseCacher {
  public static var cache: IdentifySDK.ResponseCacher {
    get
  }
  public static var doNotCache: IdentifySDK.ResponseCacher {
    get
  }
  public static func modify(using closure: @escaping ((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)) -> IdentifySDK.ResponseCacher
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
extension IdentifySDK.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, any Swift.Error>
}
extension IdentifySDK.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> IdentifySDK.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension IdentifySDK.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> IdentifySDK.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension IdentifySDK.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> IdentifySDK.DownloadRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: IdentifySDK.CardAccess, tagReader: IdentifySDK.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : IdentifySDK.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : IdentifySDK.Request {
  public typealias Handler<Success, Failure> = (IdentifySDK.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: IdentifySDK.DataStreamRequest.Event<Success, Failure>
    public let token: IdentifySDK.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(IdentifySDK.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: IdentifySDK.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: any IdentifySDK.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping IdentifySDK.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @discardableResult
  @_disfavoredOverload final public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (_ response: Foundation.HTTPURLResponse, _ completionHandler: @escaping (IdentifySDK.Request.ResponseDisposition) -> Swift.Void) -> Swift.Void) -> Self
  @discardableResult
  final public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.HTTPURLResponse) -> Swift.Void) -> Self
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping IdentifySDK.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping IdentifySDK.DataStreamRequest.Handler<Serializer.SerializedObject, IdentifySDK.AFError>) -> Self where Serializer : IdentifySDK.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping IdentifySDK.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: any IdentifySDK.DataDecoder = JSONDecoder(), preprocessor: any IdentifySDK.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping IdentifySDK.DataStreamRequest.Handler<T, IdentifySDK.AFError>) -> Self where T : Swift.Decodable
  @objc deinit
}
extension IdentifySDK.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: IdentifySDK.DataStreamRequest.Completion? {
    get
  }
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : IdentifySDK.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: any IdentifySDK.DataDecoder
  public let dataPreprocessor: any IdentifySDK.DataPreprocessor
  public init(decoder: any IdentifySDK.DataDecoder = JSONDecoder(), dataPreprocessor: any IdentifySDK.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : IdentifySDK.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : IdentifySDK.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension IdentifySDK.DataStreamSerializer {
  public static func decodable<T>(of type: T.Type, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), dataPreprocessor: any IdentifySDK.DataPreprocessor = PassthroughPreprocessor()) -> Self where Self == IdentifySDK.DecodableStreamSerializer<T>, T : Swift.Decodable
}
extension IdentifySDK.DataStreamSerializer where Self == IdentifySDK.PassthroughStreamSerializer {
  public static var passthrough: IdentifySDK.PassthroughStreamSerializer {
    get
  }
}
extension IdentifySDK.DataStreamSerializer where Self == IdentifySDK.StringStreamSerializer {
  public static var string: IdentifySDK.StringStreamSerializer {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : IdentifySDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : IdentifySDK.DataGroup {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: IdentifySDK.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol DataResponseSerializerProtocol<SerializedObject> {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
#else
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol DownloadResponseSerializerProtocol<SerializedObject> {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
#else
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol ResponseSerializer<SerializedObject> : IdentifySDK.DataResponseSerializerProtocol, IdentifySDK.DownloadResponseSerializerProtocol {
  var dataPreprocessor: any IdentifySDK.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
#else
public protocol ResponseSerializer : IdentifySDK.DataResponseSerializerProtocol, IdentifySDK.DownloadResponseSerializerProtocol {
  var dataPreprocessor: any IdentifySDK.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
#endif
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : IdentifySDK.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : IdentifySDK.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension IdentifySDK.DataPreprocessor where Self == IdentifySDK.PassthroughPreprocessor {
  public static var passthrough: IdentifySDK.PassthroughPreprocessor {
    get
  }
}
extension IdentifySDK.DataPreprocessor where Self == IdentifySDK.GoogleXSSIPreprocessor {
  public static var googleXSSI: IdentifySDK.GoogleXSSIPreprocessor {
    get
  }
}
extension IdentifySDK.ResponseSerializer {
  public static var defaultDataPreprocessor: any IdentifySDK.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: any IdentifySDK.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension IdentifySDK.DownloadResponseSerializerProtocol where Self : IdentifySDK.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
public struct URLResponseSerializer : IdentifySDK.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: (any Swift.Error)?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension IdentifySDK.DownloadResponseSerializerProtocol where Self == IdentifySDK.URLResponseSerializer {
  public static var url: IdentifySDK.URLResponseSerializer {
    get
  }
}
final public class DataResponseSerializer : IdentifySDK.ResponseSerializer {
  final public let dataPreprocessor: any IdentifySDK.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod>
  public init(dataPreprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension IdentifySDK.ResponseSerializer where Self == IdentifySDK.DataResponseSerializer {
  public static var data: IdentifySDK.DataResponseSerializer {
    get
  }
  public static func data(dataPreprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DataResponseSerializer
}
final public class StringResponseSerializer : IdentifySDK.ResponseSerializer {
  final public let dataPreprocessor: any IdentifySDK.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod>
  public init(dataPreprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension IdentifySDK.ResponseSerializer where Self == IdentifySDK.StringResponseSerializer {
  public static var string: IdentifySDK.StringResponseSerializer {
    get
  }
  public static func string(dataPreprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.StringResponseSerializer
}
@available(*, deprecated, message: "JSONResponseSerializer deprecated and will be removed in Alamofire 6. Use DecodableResponseSerializer instead.")
final public class JSONResponseSerializer : IdentifySDK.ResponseSerializer {
  final public let dataPreprocessor: any IdentifySDK.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: any IdentifySDK.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable, Swift.Sendable {
  public static let value: IdentifySDK.Empty
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension IdentifySDK.Empty : IdentifySDK.EmptyResponse {
  public static func emptyValue() -> IdentifySDK.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : IdentifySDK.DataDecoder {
}
extension Foundation.PropertyListDecoder : IdentifySDK.DataDecoder {
}
final public class DecodableResponseSerializer<T> : IdentifySDK.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: any IdentifySDK.DataPreprocessor
  final public let decoder: any IdentifySDK.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod>
  public init(dataPreprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension IdentifySDK.ResponseSerializer {
  public static func decodable<T>(of type: T.Type, dataPreprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> IdentifySDK.DecodableResponseSerializer<T> where Self == IdentifySDK.DecodableResponseSerializer<T>, T : Swift.Decodable
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : IdentifySDK.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@available(iOS 13.0, *)
public class PassportUtil {
  public var passportNumber: Swift.String
  public var dateOfBirth: Swift.String
  public var expiryDate: Swift.String
  public var passport: IdentifySDK.NFCPassportModel?
  public init()
  public func makeMrzKey(birthDate: Swift.String, expireDate: Swift.String, documentNo: Swift.String) -> Swift.String
  public func getMRZKey() -> Swift.String
  public func calcCheckSum(_ checkString: Swift.String) -> Swift.Int
  @objc deinit
}
extension Foundation.Date {
  public func toString(format: Swift.String = "yyMMdd") -> Swift.String
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : IdentifySDK.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public let AF: IdentifySDK.Session
public enum AFInfo {
  public static let version: Swift.String
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: IdentifySDK.PACEMappingType, b: IdentifySDK.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : IdentifySDK.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> IdentifySDK.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> IdentifySDK.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FirstRoom : Swift.Codable {
  public var id: Swift.String?
  public var status: Swift.String?
  public var form_uid: Swift.String?
  public var created_at: Swift.String?
  public var created_by: Swift.String?
  public var customer_id: Swift.String?
  public var customer_uid: Swift.String?
  public var language: Swift.String?
  public var sign_language: Swift.String?
  public var liveness: [Swift.Int]?
  public var modules: [Swift.String]?
  public var identification_type: Swift.String?
  public var project_id: Swift.String?
  public var selfie_comparison_count: Swift.Int?
  public var nfc_comparison_count: Swift.Int?
  public var ws_url: Swift.String?
  public var ws_secret_key: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RoomResponse : Swift.Codable {
  public var result: Swift.Bool?
  public var response_status: Swift.Int?
  public var messages: [Swift.String]?
  public var data: IdentifySDK.FirstRoom?
  public var allowed_content_types: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDKEmptyResponse : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SMSData : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SmsJson : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class WSInfoResponse : Swift.Codable {
  public var result: Swift.Bool?
  public var msg: Swift.String?
  public var data: IdentifySDK.WSInfo?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class WSInfo : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BoolResponse : Swift.Codable {
  public var result: Swift.Bool?
  public var msg: Swift.String?
  public var data: IdentifySDK.UploadDataResp?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class UploadDataResp : Swift.Codable {
  public var comparison: Swift.Bool?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class PassportModel {
  public var documentImage: UIKit.UIImage?
  public var documentType: Swift.String
  public var countryCode: Swift.String
  public var surnames: Swift.String
  public var givenNames: Swift.String
  public var documentNumber: Swift.String
  public var nationality: Swift.String
  public var birthDate: Foundation.Date?
  public var sex: Swift.String
  public var expiryDate: Foundation.Date?
  public var personalNumber: Swift.String
  public init()
  public init(documentNumber: Swift.String, birthDate: Foundation.Date, expiryDate: Foundation.Date)
  @objc deinit
}
public class SDKWebError : Swift.Decodable {
  public var errorMessages: Swift.String?
  public init(message: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class SDKError : Swift.Decodable {
  public var errorMessages: Swift.String?
  public init(message: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class SDKKpsData : Swift.Decodable {
  public var birthDate: Swift.String?, validDate: Swift.String?, serialNo: Swift.String?
  public init(birthDate: Swift.String, validDate: Swift.String, serialNo: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class IdentifyCompareManager {
  public var face1Maps: [Swift.Double]
  public var face2Maps: [Swift.Double]
  public var faceImgArray: [UIKit.UIImage]
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: IdentifySDK.SecureMessagingSupportedAlgorithms, b: IdentifySDK.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: IdentifySDK.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension IdentifySDK.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class SDKNetwork {
  public var BASE_URL: Swift.String
  public var timeoutIntervalForRequest: Swift.Int
  public var timeoutIntervalForResource: Swift.Int
  public var useSSLPinning: Swift.Bool
  public func sendRequest<T>(endpoint: Swift.String, parameters: [Swift.String : Any], callback: @escaping ((_ result: T?, _ error: (any Swift.Error)?) -> Swift.Void)) where T : Swift.Decodable, T : Swift.Encodable
  public func connectToRoom(identId: Swift.String, callback: @escaping ((_ results: IdentifySDK.RoomResponse?, _ errors: IdentifySDK.SDKWebError?) -> Swift.Void))
  public func verifySms(tid: Swift.String, tan: Swift.String, callback: @escaping ((_ results: IdentifySDK.SDKEmptyResponse) -> Swift.Void))
  public func sendIDCardOcrData(model: IdentifySDK.IDCardRaw, callback: @escaping ((_ results: IdentifySDK.BoolResponse) -> Swift.Void))
  public func uploadAddressInfo(image: Swift.String, addressText: Swift.String, callback: @escaping ((_ results: IdentifySDK.BoolResponse) -> Swift.Void))
  public func uploadVideo(videoData: Foundation.Data, callback: @escaping ((_ results: IdentifySDK.BoolResponse?, _ errors: IdentifySDK.SDKWebError?) -> Swift.Void))
  public func showAlert(msg: Swift.String)
  public func webLogger(url: Swift.String, sendingData: Any, log: Foundation.Data? = nil, webErr: (any Swift.Error)? = nil, secs: Swift.String? = "")
  public func firstReq(url: Swift.String, sendingData: Any)
  @objc deinit
}
extension Swift.Encodable {
  public func asDictionary() -> [Swift.String : Any]
}
extension UIKit.UIImage {
  public func toBase64() -> Swift.String?
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(IdentifySDK.DataGroupId, Swift.Int)
  case error(IdentifySDK.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = IdentifySDK.DataResponse<Value, IdentifySDK.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: IdentifySDK.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : IdentifySDK.ResponseSerializer
  public init<Serializer>(_ request: IdentifySDK.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : IdentifySDK.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, IdentifySDK.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, IdentifySDK.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == IdentifySDK.DataResponse<Value, IdentifySDK.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension IdentifySDK.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: IdentifySDK.DataRequest, queue: Dispatch.DispatchQueue)
}
extension IdentifySDK.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DataResponsePublisher<T> where Serializer : IdentifySDK.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> IdentifySDK.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> IdentifySDK.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = IdentifySDK.DataStreamRequest.Stream<Value, IdentifySDK.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: IdentifySDK.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : IdentifySDK.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, IdentifySDK.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, IdentifySDK.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == IdentifySDK.DataStreamRequest.Stream<Value, IdentifySDK.AFError>
}
extension IdentifySDK.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DataStreamPublisher<Serializer.SerializedObject> where Serializer : IdentifySDK.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), preprocessor: any IdentifySDK.DataPreprocessor = PassthroughPreprocessor()) -> IdentifySDK.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = IdentifySDK.DownloadResponse<Value, IdentifySDK.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: IdentifySDK.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : IdentifySDK.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: IdentifySDK.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : IdentifySDK.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, IdentifySDK.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, IdentifySDK.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == IdentifySDK.DownloadResponse<Value, IdentifySDK.AFError>
}
extension IdentifySDK.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DownloadResponsePublisher<T> where Serializer : IdentifySDK.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DownloadResponsePublisher<T> where Serializer : IdentifySDK.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishURL(queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> IdentifySDK.DownloadResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> IdentifySDK.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension IdentifySDK.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: IdentifySDK.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension IdentifySDK.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> IdentifySDK.DownloadResponsePublisher<Foundation.URL?>
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol WebSocketMessageSerializer<Output, Failure> {
  associatedtype Output
  associatedtype Failure : Swift.Error = any Swift.Error
  func decode(_ message: Foundation.URLSessionWebSocketTask.Message) throws -> Self.Output
}
#else
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol WebSocketMessageSerializer {
  associatedtype Output
  associatedtype Failure : Swift.Error = any Swift.Error
  func decode(_ message: Foundation.URLSessionWebSocketTask.Message) throws -> Self.Output
}
#endif
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.WebSocketMessageSerializer {
  public static func json<Value>(decoding _: Value.Type = Value.self, using decoder: Foundation.JSONDecoder = JSONDecoder()) -> IdentifySDK.DecodableWebSocketMessageDecoder<Value> where Self == IdentifySDK.DecodableWebSocketMessageDecoder<Value>, Value : Swift.Decodable
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DecodableWebSocketMessageDecoder<Value> : IdentifySDK.WebSocketMessageSerializer where Value : Swift.Decodable {
  public enum Error : Swift.Error {
    case decoding(any Swift.Error)
    case unknownMessage(description: Swift.String)
  }
  public let decoder: any IdentifySDK.DataDecoder
  public init(decoder: any IdentifySDK.DataDecoder)
  public func decode(_ message: Foundation.URLSessionWebSocketTask.Message) throws -> Value
  public typealias Failure = any Swift.Error
  public typealias Output = Value
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IdentifySDK.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [IdentifySDK.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: IdentifySDK.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UploadRequest : IdentifySDK.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: any IdentifySDK.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  final public var uploadable: IdentifySDK.UploadRequest.Uploadable?
  final public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> IdentifySDK.UploadRequest.Uploadable
}
extension IdentifySDK.UploadRequest.Uploadable : IdentifySDK.UploadableConvertible {
  public func createUploadable() throws -> IdentifySDK.UploadRequest.Uploadable
}
public protocol UploadConvertible : IdentifySDK.URLRequestConvertible, IdentifySDK.UploadableConvertible {
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DeflateRequestCompressor : IdentifySDK.RequestInterceptor {
  public enum DuplicateHeaderBehavior {
    case error
    case replace
    case skip
    public static func == (a: IdentifySDK.DeflateRequestCompressor.DuplicateHeaderBehavior, b: IdentifySDK.DeflateRequestCompressor.DuplicateHeaderBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DuplicateHeaderError : Swift.Error {
  }
  public let duplicateHeaderBehavior: IdentifySDK.DeflateRequestCompressor.DuplicateHeaderBehavior
  public let shouldCompressBodyData: (_ bodyData: Foundation.Data) -> Swift.Bool
  public init(duplicateHeaderBehavior: IdentifySDK.DeflateRequestCompressor.DuplicateHeaderBehavior = .error, shouldCompressBodyData: @escaping (_ bodyData: Foundation.Data) -> Swift.Bool = { _ in true })
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: IdentifySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.RequestInterceptor where Self == IdentifySDK.DeflateRequestCompressor {
  public static var deflateCompressor: IdentifySDK.DeflateRequestCompressor {
    get
  }
  public static func deflateCompressor(duplicateHeaderBehavior: IdentifySDK.DeflateRequestCompressor.DuplicateHeaderBehavior = .error, shouldCompressBodyData: @escaping (_ bodyData: Foundation.Data) -> Swift.Bool = { _ in true }) -> IdentifySDK.DeflateRequestCompressor
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: any IdentifySDK.URLRequestConvertible, with parameters: IdentifySDK.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : IdentifySDK.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: IdentifySDK.URLEncoding.Destination, b: IdentifySDK.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    case custom((_ key: Swift.String, _ index: Swift.Int) -> Swift.String)
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: IdentifySDK.URLEncoding.BoolEncoding, b: IdentifySDK.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: IdentifySDK.URLEncoding {
    get
  }
  public static var queryString: IdentifySDK.URLEncoding {
    get
  }
  public static var httpBody: IdentifySDK.URLEncoding {
    get
  }
  public let destination: IdentifySDK.URLEncoding.Destination
  public let arrayEncoding: IdentifySDK.URLEncoding.ArrayEncoding
  public let boolEncoding: IdentifySDK.URLEncoding.BoolEncoding
  public init(destination: IdentifySDK.URLEncoding.Destination = .methodDependent, arrayEncoding: IdentifySDK.URLEncoding.ArrayEncoding = .brackets, boolEncoding: IdentifySDK.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: any IdentifySDK.URLRequestConvertible, with parameters: IdentifySDK.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : IdentifySDK.ParameterEncoding {
  public enum Error : Swift.Error {
    case invalidJSONObject
    public static func == (a: IdentifySDK.JSONEncoding.Error, b: IdentifySDK.JSONEncoding.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: IdentifySDK.JSONEncoding {
    get
  }
  public static var prettyPrinted: IdentifySDK.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: any IdentifySDK.URLRequestConvertible, with parameters: IdentifySDK.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: any IdentifySDK.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
extension IdentifySDK.JSONEncoding.Error {
  public var localizedDescription: Swift.String {
    get
  }
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: IdentifySDK.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: IdentifySDK.AlamofireExtension<Self.ExtendedType> { get set }
}
extension IdentifySDK.AlamofireExtended {
  public static var af: IdentifySDK.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: IdentifySDK.AlamofireExtension<Self> {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers public class AlertViewManager : ObjectiveC.NSObject {
  public class var defaultManager: IdentifySDK.AlertViewManager {
    get
  }
  public func showOkAlert(_ title: Swift.String?, message: Swift.String?, handler: ((UIKit.UIAlertAction) -> Swift.Void)?)
  public func showErrorAlert(error: any Swift.Error)
  public func showLogoutAlert()
  public func showOfflineAlert()
  @objc override dynamic public init()
  @objc deinit
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: IdentifySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: IdentifySDK.Request, didFailToCreateURLRequestWithError error: IdentifySDK.AFError)
  func request(_ request: IdentifySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: IdentifySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: IdentifySDK.AFError)
  func request(_ request: IdentifySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: IdentifySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: IdentifySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: IdentifySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: IdentifySDK.AFError)
  func request(_ request: IdentifySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: IdentifySDK.AFError?)
  func requestIsRetrying(_ request: IdentifySDK.Request)
  func requestDidFinish(_ request: IdentifySDK.Request)
  func requestDidResume(_ request: IdentifySDK.Request)
  func request(_ request: IdentifySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: IdentifySDK.Request)
  func request(_ request: IdentifySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: IdentifySDK.Request)
  func request(_ request: IdentifySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: IdentifySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: IdentifySDK.Request.ValidationResult)
  func request(_ request: IdentifySDK.DataRequest, didParseResponse response: IdentifySDK.DataResponse<Foundation.Data?, IdentifySDK.AFError>)
  func request<Value>(_ request: IdentifySDK.DataRequest, didParseResponse response: IdentifySDK.DataResponse<Value, IdentifySDK.AFError>)
  func request(_ request: IdentifySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: IdentifySDK.Request.ValidationResult)
  func request<Value>(_ request: IdentifySDK.DataStreamRequest, didParseStream result: Swift.Result<Value, IdentifySDK.AFError>)
  func request(_ request: IdentifySDK.UploadRequest, didCreateUploadable uploadable: IdentifySDK.UploadRequest.Uploadable)
  func request(_ request: IdentifySDK.UploadRequest, didFailToCreateUploadableWithError error: IdentifySDK.AFError)
  func request(_ request: IdentifySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: IdentifySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, IdentifySDK.AFError>)
  func request(_ request: IdentifySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: IdentifySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: IdentifySDK.Request.ValidationResult)
  func request(_ request: IdentifySDK.DownloadRequest, didParseResponse response: IdentifySDK.DownloadResponse<Foundation.URL?, IdentifySDK.AFError>)
  func request<Value>(_ request: IdentifySDK.DownloadRequest, didParseResponse response: IdentifySDK.DownloadResponse<Value, IdentifySDK.AFError>)
}
extension IdentifySDK.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: IdentifySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: IdentifySDK.Request, didFailToCreateURLRequestWithError error: IdentifySDK.AFError)
  public func request(_ request: IdentifySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: IdentifySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: IdentifySDK.AFError)
  public func request(_ request: IdentifySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: IdentifySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: IdentifySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: IdentifySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: IdentifySDK.AFError)
  public func request(_ request: IdentifySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: IdentifySDK.AFError?)
  public func requestIsRetrying(_ request: IdentifySDK.Request)
  public func requestDidFinish(_ request: IdentifySDK.Request)
  public func requestDidResume(_ request: IdentifySDK.Request)
  public func request(_ request: IdentifySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: IdentifySDK.Request)
  public func request(_ request: IdentifySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: IdentifySDK.Request)
  public func request(_ request: IdentifySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: IdentifySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: IdentifySDK.Request.ValidationResult)
  public func request(_ request: IdentifySDK.DataRequest, didParseResponse response: IdentifySDK.DataResponse<Foundation.Data?, IdentifySDK.AFError>)
  public func request<Value>(_ request: IdentifySDK.DataRequest, didParseResponse response: IdentifySDK.DataResponse<Value, IdentifySDK.AFError>)
  public func request(_ request: IdentifySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: IdentifySDK.Request.ValidationResult)
  public func request<Value>(_ request: IdentifySDK.DataStreamRequest, didParseStream result: Swift.Result<Value, IdentifySDK.AFError>)
  public func request(_ request: IdentifySDK.UploadRequest, didCreateUploadable uploadable: IdentifySDK.UploadRequest.Uploadable)
  public func request(_ request: IdentifySDK.UploadRequest, didFailToCreateUploadableWithError error: IdentifySDK.AFError)
  public func request(_ request: IdentifySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: IdentifySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, IdentifySDK.AFError>)
  public func request(_ request: IdentifySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: IdentifySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: IdentifySDK.Request.ValidationResult)
  public func request(_ request: IdentifySDK.DownloadRequest, didParseResponse response: IdentifySDK.DownloadResponse<Foundation.URL?, IdentifySDK.AFError>)
  public func request<Value>(_ request: IdentifySDK.DownloadRequest, didParseResponse response: IdentifySDK.DownloadResponse<Value, IdentifySDK.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : IdentifySDK.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: IdentifySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: IdentifySDK.Request, didFailToCreateURLRequestWithError error: IdentifySDK.AFError)
  final public func request(_ request: IdentifySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: IdentifySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: IdentifySDK.AFError)
  final public func request(_ request: IdentifySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: IdentifySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: IdentifySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: IdentifySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: IdentifySDK.AFError)
  final public func request(_ request: IdentifySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: IdentifySDK.AFError?)
  final public func requestIsRetrying(_ request: IdentifySDK.Request)
  final public func requestDidFinish(_ request: IdentifySDK.Request)
  final public func requestDidResume(_ request: IdentifySDK.Request)
  final public func request(_ request: IdentifySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: IdentifySDK.Request)
  final public func request(_ request: IdentifySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: IdentifySDK.Request)
  final public func request(_ request: IdentifySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: IdentifySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: IdentifySDK.Request.ValidationResult)
  final public func request(_ request: IdentifySDK.DataRequest, didParseResponse response: IdentifySDK.DataResponse<Foundation.Data?, IdentifySDK.AFError>)
  final public func request<Value>(_ request: IdentifySDK.DataRequest, didParseResponse response: IdentifySDK.DataResponse<Value, IdentifySDK.AFError>)
  final public func request(_ request: IdentifySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: IdentifySDK.Request.ValidationResult)
  final public func request<Value>(_ request: IdentifySDK.DataStreamRequest, didParseStream result: Swift.Result<Value, IdentifySDK.AFError>)
  final public func request(_ request: IdentifySDK.UploadRequest, didCreateUploadable uploadable: IdentifySDK.UploadRequest.Uploadable)
  final public func request(_ request: IdentifySDK.UploadRequest, didFailToCreateUploadableWithError error: IdentifySDK.AFError)
  final public func request(_ request: IdentifySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: IdentifySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, IdentifySDK.AFError>)
  final public func request(_ request: IdentifySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: IdentifySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: IdentifySDK.Request.ValidationResult)
  final public func request(_ request: IdentifySDK.DownloadRequest, didParseResponse response: IdentifySDK.DownloadResponse<Foundation.URL?, IdentifySDK.AFError>)
  final public func request<Value>(_ request: IdentifySDK.DownloadRequest, didParseResponse response: IdentifySDK.DownloadResponse<Value, IdentifySDK.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : IdentifySDK.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, (any Swift.Error)?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, (any Swift.Error)?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((IdentifySDK.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((IdentifySDK.Request, IdentifySDK.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((IdentifySDK.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((IdentifySDK.Request, Foundation.URLRequest, IdentifySDK.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((IdentifySDK.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((IdentifySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((IdentifySDK.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((IdentifySDK.Request, Foundation.URLSessionTask, IdentifySDK.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((IdentifySDK.Request, Foundation.URLSessionTask, IdentifySDK.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((IdentifySDK.Request) -> Swift.Void)?
  open var requestDidFinish: ((IdentifySDK.Request) -> Swift.Void)?
  open var requestDidResume: ((IdentifySDK.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((IdentifySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((IdentifySDK.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((IdentifySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((IdentifySDK.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((IdentifySDK.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((IdentifySDK.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, IdentifySDK.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((IdentifySDK.DataRequest, IdentifySDK.DataResponse<Foundation.Data?, IdentifySDK.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((IdentifySDK.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, IdentifySDK.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((IdentifySDK.UploadRequest, IdentifySDK.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((IdentifySDK.UploadRequest, IdentifySDK.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((IdentifySDK.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((IdentifySDK.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, IdentifySDK.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((IdentifySDK.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((IdentifySDK.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, IdentifySDK.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((IdentifySDK.DownloadRequest, IdentifySDK.DownloadResponse<Foundation.URL?, IdentifySDK.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: IdentifySDK.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: IdentifySDK.Request, didFailToCreateURLRequestWithError error: IdentifySDK.AFError)
  open func request(_ request: IdentifySDK.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: IdentifySDK.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: IdentifySDK.AFError)
  open func request(_ request: IdentifySDK.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: IdentifySDK.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: IdentifySDK.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: IdentifySDK.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: IdentifySDK.AFError)
  open func request(_ request: IdentifySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: IdentifySDK.AFError?)
  open func requestIsRetrying(_ request: IdentifySDK.Request)
  open func requestDidFinish(_ request: IdentifySDK.Request)
  open func requestDidResume(_ request: IdentifySDK.Request)
  public func request(_ request: IdentifySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: IdentifySDK.Request)
  public func request(_ request: IdentifySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: IdentifySDK.Request)
  public func request(_ request: IdentifySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: IdentifySDK.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: IdentifySDK.Request.ValidationResult)
  open func request(_ request: IdentifySDK.DataRequest, didParseResponse response: IdentifySDK.DataResponse<Foundation.Data?, IdentifySDK.AFError>)
  public func request(_ request: IdentifySDK.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: IdentifySDK.Request.ValidationResult)
  open func request(_ request: IdentifySDK.UploadRequest, didCreateUploadable uploadable: IdentifySDK.UploadRequest.Uploadable)
  open func request(_ request: IdentifySDK.UploadRequest, didFailToCreateUploadableWithError error: IdentifySDK.AFError)
  open func request(_ request: IdentifySDK.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: IdentifySDK.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, IdentifySDK.AFError>)
  open func request(_ request: IdentifySDK.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: IdentifySDK.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: IdentifySDK.Request.ValidationResult)
  open func request(_ request: IdentifySDK.DownloadRequest, didParseResponse response: IdentifySDK.DownloadResponse<Foundation.URL?, IdentifySDK.AFError>)
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> IdentifySDK.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IdentifySDK.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [IdentifySDK.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : any IdentifySDK.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : any IdentifySDK.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> (any IdentifySDK.ServerTrustEvaluating)?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : IdentifySDK.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : IdentifySDK.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: IdentifySDK.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: IdentifySDK.RevocationTrustEvaluator.Options
    public static let ocsp: IdentifySDK.RevocationTrustEvaluator.Options
    public static let preferCRL: IdentifySDK.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: IdentifySDK.RevocationTrustEvaluator.Options
    public static let any: IdentifySDK.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = IdentifySDK.RevocationTrustEvaluator.Options
    public typealias Element = IdentifySDK.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: IdentifySDK.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension IdentifySDK.ServerTrustEvaluating where Self == IdentifySDK.RevocationTrustEvaluator {
  public static var revocationChecking: IdentifySDK.RevocationTrustEvaluator {
    get
  }
  public static func revocationChecking(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: IdentifySDK.RevocationTrustEvaluator.Options = .any) -> IdentifySDK.RevocationTrustEvaluator
}
final public class PinnedCertificatesTrustEvaluator : IdentifySDK.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension IdentifySDK.ServerTrustEvaluating where Self == IdentifySDK.PinnedCertificatesTrustEvaluator {
  public static var pinnedCertificates: IdentifySDK.PinnedCertificatesTrustEvaluator {
    get
  }
  public static func pinnedCertificates(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> IdentifySDK.PinnedCertificatesTrustEvaluator
}
final public class PublicKeysTrustEvaluator : IdentifySDK.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension IdentifySDK.ServerTrustEvaluating where Self == IdentifySDK.PublicKeysTrustEvaluator {
  public static var publicKeys: IdentifySDK.PublicKeysTrustEvaluator {
    get
  }
  public static func publicKeys(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> IdentifySDK.PublicKeysTrustEvaluator
}
final public class CompositeTrustEvaluator : IdentifySDK.ServerTrustEvaluating {
  public init(evaluators: [any IdentifySDK.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension IdentifySDK.ServerTrustEvaluating where Self == IdentifySDK.CompositeTrustEvaluator {
  public static func composite(evaluators: [any IdentifySDK.ServerTrustEvaluating]) -> IdentifySDK.CompositeTrustEvaluator
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = IdentifySDK.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : IdentifySDK.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == any IdentifySDK.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension IdentifySDK.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension IdentifySDK.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> any Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> any Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension IdentifySDK.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: IdentifySDK.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension IdentifySDK.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension IdentifySDK.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension IdentifySDK.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension IdentifySDK.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
@_hasMissingDesignatedInitializers public class Steps : Swift.Codable {
  public var nfc: Swift.Bool?
  public var liveness: Swift.Bool?
  public var idFront: Swift.Bool?
  public var idBack: Swift.Bool?
  public var video: Swift.Bool?
  public var signature: Swift.Bool?
  public var speech: Swift.Bool?
  public var selfie: Swift.Bool?
  public var prepare: Swift.Bool?
  public var language: Swift.String?
  public var sign_language: Swift.Bool?
  public var verifyAddress: Swift.Bool?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
public class IDCardRaw : Swift.Codable {
  public init(identId: Swift.String?, serialNo: Swift.String?, expireDate: Swift.String?, rawData: Swift.String?, birthdate: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class IdentifyCard : Swift.Codable {
  public var ident_id: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var personalNumber: Swift.String?
  public var birthDate: Swift.String?
  public var expireDate: Swift.String?
  public var serialNumber: Swift.String?
  public var nationality: Swift.String?
  public var docType: Swift.String?
  public var authority: Swift.String?
  public var gender: Swift.String?
  public var image: Swift.String?
  public var mrzInfo: Swift.String?
  public var activeAuth: Swift.Bool?
  public var passiveAuth: Swift.Bool?
  public var address: Swift.String?
  public var fullName: Swift.String?
  public init(ident_id: Swift.String?, name: Swift.String?, surname: Swift.String?, personalNumber: Swift.String?, birthdate: Swift.String?, expireDate: Swift.String?, serialNumber: Swift.String?, nationality: Swift.String?, docType: Swift.String?, authority: Swift.String?, gender: Swift.String?, image: Swift.String?, mrzInfo: Swift.String?, activeAuth: Swift.Bool?, passiveAuth: Swift.Bool?, address: Swift.String?, fullName: Swift.String?)
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class FrontIdInfo : Swift.Codable {
  public var idTcknOcr: Swift.String?, idSurnameOcr: Swift.String?, idNameOcr: Swift.String?, idBirthDateOcr: Swift.String?, idSerialNoOcr: Swift.String?, idValidUntilOcr: Swift.String?, fullMrzKey: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BackIdInfo : Swift.Codable {
  public var idSurnameMRZ: Swift.String?, idNameMRZ: Swift.String?, idMotherNameOcr: Swift.String?, idFatherNameOcr: Swift.String?, idIssuedByOcr: Swift.String?, fullMrzKey: Swift.String?, idTcknMRZ: Swift.String?, idDocumentNumberMRZ: Swift.String?, idBirthDateMRZ: Swift.String?, idValidDateMRZ: Swift.String?, idTypeMRZ: Swift.String?, idGenderMRZ: Swift.String?, bulkData: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class FinalIdCard : Swift.Codable {
  public var frontCard: IdentifySDK.FrontIdInfo?
  public var backCard: IdentifySDK.BackIdInfo?
  public var nfcIdCard: IdentifySDK.IdentifyCard?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class AutoIdentStatus : Swift.Codable {
  public var identCompleteStatus: Swift.Bool?
  public var errorMessages: [Swift.String]?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: IdentifySDK.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : IdentifySDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: IdentifySDK.Redirector
  public static let doNotFollow: IdentifySDK.Redirector
  public let behavior: IdentifySDK.Redirector.Behavior
  public init(behavior: IdentifySDK.Redirector.Behavior)
}
extension IdentifySDK.Redirector : IdentifySDK.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
extension IdentifySDK.RedirectHandler where Self == IdentifySDK.Redirector {
  public static var follow: IdentifySDK.Redirector {
    get
  }
  public static var doNotFollow: IdentifySDK.Redirector {
    get
  }
  public static func modify(using closure: @escaping (Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?) -> IdentifySDK.Redirector
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.Request {
  #if compiler(>=5.3) && $RethrowsProtocol
  public func uploadProgress(bufferingPolicy: IdentifySDK.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> IdentifySDK.StreamOf<Foundation.Progress>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func downloadProgress(bufferingPolicy: IdentifySDK.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> IdentifySDK.StreamOf<Foundation.Progress>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlRequests(bufferingPolicy: IdentifySDK.StreamOf<Foundation.URLRequest>.BufferingPolicy = .unbounded) -> IdentifySDK.StreamOf<Foundation.URLRequest>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlSessionTasks(bufferingPolicy: IdentifySDK.StreamOf<Foundation.URLSessionTask>.BufferingPolicy = .unbounded) -> IdentifySDK.StreamOf<Foundation.URLSessionTask>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func cURLDescriptions(bufferingPolicy: IdentifySDK.StreamOf<Swift.String>.BufferingPolicy = .unbounded) -> IdentifySDK.StreamOf<Swift.String>
  #endif
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataTask<Value> {
  #if compiler(>=5.3) && $EffectfulProp
  public var response: IdentifySDK.DataResponse<Value, IdentifySDK.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, IdentifySDK.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.DataRequest {
  #if compiler(>=5.3) && $RethrowsProtocol
  public func httpResponses(bufferingPolicy: IdentifySDK.StreamOf<Foundation.HTTPURLResponse>.BufferingPolicy = .unbounded) -> IdentifySDK.StreamOf<Foundation.HTTPURLResponse>
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  @_disfavoredOverload public func onHTTPResponse(perform handler: @escaping @Sendable (_ response: Foundation.HTTPURLResponse) async -> IdentifySDK.Request.ResponseDisposition) -> Self
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  public func onHTTPResponse(perform handler: @escaping @Sendable (_ response: Foundation.HTTPURLResponse) async -> Swift.Void) -> Self
  #endif
  public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DataTask<Foundation.Data>
  public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> IdentifySDK.DataTask<Value> where Value : Swift.Decodable
  public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DataTask<Swift.String>
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> IdentifySDK.DataTask<Serializer.SerializedObject> where Serializer : IdentifySDK.ResponseSerializer
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> IdentifySDK.DataTask<Serializer.SerializedObject> where Serializer : IdentifySDK.DataResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DownloadTask<Value> {
  #if compiler(>=5.3) && $EffectfulProp
  public var response: IdentifySDK.DownloadResponse<Value, IdentifySDK.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, IdentifySDK.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.DownloadRequest {
  final public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DownloadTask<Foundation.Data>
  final public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> IdentifySDK.DownloadTask<Value> where Value : Swift.Decodable
  final public func serializingDownloadedFileURL(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> IdentifySDK.DownloadTask<Foundation.URL>
  final public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> IdentifySDK.DownloadTask<Swift.String>
  final public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> IdentifySDK.DownloadTask<Serializer.SerializedObject> where Serializer : IdentifySDK.ResponseSerializer
  final public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> IdentifySDK.DownloadTask<Serializer.SerializedObject> where Serializer : IdentifySDK.DownloadResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataStreamTask {
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias Stream<Success, Failure> = IdentifySDK.StreamOf<IdentifySDK.DataStreamRequest.Stream<Success, Failure>> where Failure : Swift.Error
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: IdentifySDK.DataStreamTask.Stream<Foundation.Data, Swift.Never>.BufferingPolicy = .unbounded) -> IdentifySDK.DataStreamTask.Stream<Foundation.Data, Swift.Never>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingStrings(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: IdentifySDK.DataStreamTask.Stream<Swift.String, Swift.Never>.BufferingPolicy = .unbounded) -> IdentifySDK.DataStreamTask.Stream<Swift.String, Swift.Never>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingDecodables<T>(_ type: T.Type = T.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: IdentifySDK.DataStreamTask.Stream<T, IdentifySDK.AFError>.BufferingPolicy = .unbounded) -> IdentifySDK.DataStreamTask.Stream<T, IdentifySDK.AFError> where T : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingResponses<Serializer>(serializedUsing serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: IdentifySDK.DataStreamTask.Stream<Serializer.SerializedObject, IdentifySDK.AFError>.BufferingPolicy = .unbounded) -> IdentifySDK.DataStreamTask.Stream<Serializer.SerializedObject, IdentifySDK.AFError> where Serializer : IdentifySDK.DataStreamSerializer
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.DataStreamRequest {
  #if compiler(>=5.3) && $RethrowsProtocol
  final public func httpResponses(bufferingPolicy: IdentifySDK.StreamOf<Foundation.HTTPURLResponse>.BufferingPolicy = .unbounded) -> IdentifySDK.StreamOf<Foundation.HTTPURLResponse>
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  @_disfavoredOverload final public func onHTTPResponse(perform handler: @escaping @Sendable (Foundation.HTTPURLResponse) async -> IdentifySDK.Request.ResponseDisposition) -> Self
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  final public func onHTTPResponse(perform handler: @escaping @Sendable (Foundation.HTTPURLResponse) async -> Swift.Void) -> Self
  #endif
  final public func streamTask() -> IdentifySDK.DataStreamTask
}
#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct StreamOf<Element> : _Concurrency.AsyncSequence {
  public typealias AsyncIterator = IdentifySDK.StreamOf<Element>.Iterator
  public typealias BufferingPolicy = _Concurrency.AsyncStream<Element>.Continuation.BufferingPolicy
  public func makeAsyncIterator() -> IdentifySDK.StreamOf<Element>.Iterator
  public struct Iterator : _Concurrency.AsyncIteratorProtocol {
    #if compiler(>=5.3) && $AsyncAwait
    public mutating func next() async -> Element?
    #endif
  }
}
#endif
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : IdentifySDK.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
open class Session {
  public static let `default`: IdentifySDK.Session
  final public let session: Foundation.URLSession
  final public let delegate: IdentifySDK.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: (any IdentifySDK.RequestInterceptor)?
  final public let serverTrustManager: IdentifySDK.ServerTrustManager?
  final public let redirectHandler: (any IdentifySDK.RedirectHandler)?
  final public let cachedResponseHandler: (any IdentifySDK.CachedResponseHandler)?
  final public let eventMonitor: IdentifySDK.CompositeEventMonitor
  final public let defaultEventMonitors: [any IdentifySDK.EventMonitor]
  public init(session: Foundation.URLSession, delegate: IdentifySDK.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, serverTrustManager: IdentifySDK.ServerTrustManager? = nil, redirectHandler: (any IdentifySDK.RedirectHandler)? = nil, cachedResponseHandler: (any IdentifySDK.CachedResponseHandler)? = nil, eventMonitors: [any IdentifySDK.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: IdentifySDK.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, serverTrustManager: IdentifySDK.ServerTrustManager? = nil, redirectHandler: (any IdentifySDK.RedirectHandler)? = nil, cachedResponseHandler: (any IdentifySDK.CachedResponseHandler)? = nil, eventMonitors: [any IdentifySDK.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<IdentifySDK.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .get, parameters: IdentifySDK.Parameters? = nil, encoding: any IdentifySDK.ParameterEncoding = URLEncoding.default, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.DataRequest
  open func request<Parameters>(_ convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .get, parameters: Parameters? = nil, encoder: any IdentifySDK.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: any IdentifySDK.URLRequestConvertible, interceptor: (any IdentifySDK.RequestInterceptor)? = nil) -> IdentifySDK.DataRequest
  open func streamRequest<Parameters>(_ convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .get, parameters: Parameters? = nil, encoder: any IdentifySDK.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: IdentifySDK.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .get, headers: IdentifySDK.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.DataStreamRequest
  open func streamRequest(_ convertible: any IdentifySDK.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: (any IdentifySDK.RequestInterceptor)? = nil) -> IdentifySDK.DataStreamRequest
  open func download(_ convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .get, parameters: IdentifySDK.Parameters? = nil, encoding: any IdentifySDK.ParameterEncoding = URLEncoding.default, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, requestModifier: IdentifySDK.Session.RequestModifier? = nil, to destination: IdentifySDK.DownloadRequest.Destination? = nil) -> IdentifySDK.DownloadRequest
  open func download<Parameters>(_ convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .get, parameters: Parameters? = nil, encoder: any IdentifySDK.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, requestModifier: IdentifySDK.Session.RequestModifier? = nil, to destination: IdentifySDK.DownloadRequest.Destination? = nil) -> IdentifySDK.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: any IdentifySDK.URLRequestConvertible, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, to destination: IdentifySDK.DownloadRequest.Destination? = nil) -> IdentifySDK.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, to destination: IdentifySDK.DownloadRequest.Destination? = nil) -> IdentifySDK.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .post, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: any IdentifySDK.URLRequestConvertible, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> IdentifySDK.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .post, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: any IdentifySDK.URLRequestConvertible, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> IdentifySDK.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: any IdentifySDK.URLConvertible, method: IdentifySDK.HTTPMethod = .post, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: any IdentifySDK.URLRequestConvertible, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> IdentifySDK.UploadRequest
  open func upload(multipartFormData: @escaping (IdentifySDK.MultipartFormData) -> Swift.Void, to url: any IdentifySDK.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: IdentifySDK.HTTPMethod = .post, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.UploadRequest
  open func upload(multipartFormData: @escaping (IdentifySDK.MultipartFormData) -> Swift.Void, with request: any IdentifySDK.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> IdentifySDK.UploadRequest
  open func upload(multipartFormData: IdentifySDK.MultipartFormData, to url: any IdentifySDK.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: IdentifySDK.HTTPMethod = .post, headers: IdentifySDK.HTTPHeaders? = nil, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: IdentifySDK.Session.RequestModifier? = nil) -> IdentifySDK.UploadRequest
  open func upload(multipartFormData: IdentifySDK.MultipartFormData, with request: any IdentifySDK.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: (any IdentifySDK.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> IdentifySDK.UploadRequest
}
extension IdentifySDK.Session : IdentifySDK.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: IdentifySDK.Request)
  public func retryResult(for request: IdentifySDK.Request, dueTo error: IdentifySDK.AFError, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: IdentifySDK.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
open class RetryPolicy : IdentifySDK.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<IdentifySDK.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<IdentifySDK.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<IdentifySDK.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: IdentifySDK.Request, for session: IdentifySDK.Session, dueTo error: any Swift.Error, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
  open func shouldRetry(request: IdentifySDK.Request, dueTo error: any Swift.Error) -> Swift.Bool
  @objc deinit
}
extension IdentifySDK.RequestInterceptor where Self == IdentifySDK.RetryPolicy {
  public static var retryPolicy: IdentifySDK.RetryPolicy {
    get
  }
  public static func retryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<IdentifySDK.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes) -> IdentifySDK.RetryPolicy
}
open class ConnectionLostRetryPolicy : IdentifySDK.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<IdentifySDK.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
extension IdentifySDK.RequestInterceptor where Self == IdentifySDK.ConnectionLostRetryPolicy {
  public static var connectionLostRetryPolicy: IdentifySDK.ConnectionLostRetryPolicy {
    get
  }
  public static func connectionLostRetryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<IdentifySDK.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods) -> IdentifySDK.ConnectionLostRetryPolicy
}
@_hasMissingDesignatedInitializers final public class DownloadRequest : IdentifySDK.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: IdentifySDK.DownloadRequest.Options
    public static let removePreviousFile: IdentifySDK.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = IdentifySDK.DownloadRequest.Options
    public typealias Element = IdentifySDK.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: IdentifySDK.DownloadRequest.Options)
  final public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: IdentifySDK.DownloadRequest.Options = []) -> IdentifySDK.DownloadRequest.Destination
  public enum Downloadable {
    case request(any IdentifySDK.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  final public var resumeData: Foundation.Data? {
    get
  }
  final public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: IdentifySDK.DownloadRequest.Downloadable
  final public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override final public func cancel() -> Self
  @discardableResult
  final public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  final public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  final public func validate(_ validation: @escaping IdentifySDK.DownloadRequest.Validation) -> Self
  @discardableResult
  final public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  final public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : IdentifySDK.DownloadResponseSerializerProtocol
  @discardableResult
  final public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : IdentifySDK.ResponseSerializer
  @discardableResult
  final public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
  @discardableResult
  final public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
  @discardableResult
  final public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  final public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<Any>) -> Swift.Void) -> Self
  @discardableResult
  final public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any IdentifySDK.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any IdentifySDK.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<IdentifySDK.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (IdentifySDK.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
  @objc deinit
}
public struct RequestAdapterState {
  public let requestID: Foundation.UUID
  public let session: IdentifySDK.Session
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: IdentifySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  func adapt(_ urlRequest: Foundation.URLRequest, using state: IdentifySDK.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
}
extension IdentifySDK.RequestAdapter {
  public func adapt(_ urlRequest: Foundation.URLRequest, using state: IdentifySDK.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(any Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: IdentifySDK.Request, for session: IdentifySDK.Session, dueTo error: any Swift.Error, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : IdentifySDK.RequestAdapter, IdentifySDK.RequestRetrier {
}
extension IdentifySDK.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: IdentifySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  public func retry(_ request: IdentifySDK.Request, for session: IdentifySDK.Session, dueTo error: any Swift.Error, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, IdentifySDK.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (IdentifySDK.Request, IdentifySDK.Session, any Swift.Error, _ completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : IdentifySDK.RequestInterceptor {
  public init(_ adaptHandler: @escaping IdentifySDK.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: IdentifySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: IdentifySDK.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension IdentifySDK.RequestAdapter where Self == IdentifySDK.Adapter {
  public static func adapter(using closure: @escaping IdentifySDK.AdaptHandler) -> IdentifySDK.Adapter
}
open class Retrier : IdentifySDK.RequestInterceptor {
  public init(_ retryHandler: @escaping IdentifySDK.RetryHandler)
  open func retry(_ request: IdentifySDK.Request, for session: IdentifySDK.Session, dueTo error: any Swift.Error, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
  @objc deinit
}
extension IdentifySDK.RequestRetrier where Self == IdentifySDK.Retrier {
  public static func retrier(using closure: @escaping IdentifySDK.RetryHandler) -> IdentifySDK.Retrier
}
open class Interceptor : IdentifySDK.RequestInterceptor {
  final public let adapters: [any IdentifySDK.RequestAdapter]
  final public let retriers: [any IdentifySDK.RequestRetrier]
  public init(adaptHandler: @escaping IdentifySDK.AdaptHandler, retryHandler: @escaping IdentifySDK.RetryHandler)
  public init(adapter: any IdentifySDK.RequestAdapter, retrier: any IdentifySDK.RequestRetrier)
  public init(adapters: [any IdentifySDK.RequestAdapter] = [], retriers: [any IdentifySDK.RequestRetrier] = [], interceptors: [any IdentifySDK.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: IdentifySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: IdentifySDK.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  open func retry(_ request: IdentifySDK.Request, for session: IdentifySDK.Session, dueTo error: any Swift.Error, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
  @objc deinit
}
extension IdentifySDK.RequestInterceptor where Self == IdentifySDK.Interceptor {
  public static func interceptor(adapter: @escaping IdentifySDK.AdaptHandler, retrier: @escaping IdentifySDK.RetryHandler) -> IdentifySDK.Interceptor
  public static func interceptor(adapter: any IdentifySDK.RequestAdapter, retrier: any IdentifySDK.RequestRetrier) -> IdentifySDK.Interceptor
  public static func interceptor(adapters: [any IdentifySDK.RequestAdapter] = [], retriers: [any IdentifySDK.RequestRetrier] = [], interceptors: [any IdentifySDK.RequestInterceptor] = []) -> IdentifySDK.Interceptor
}
public enum SDKNetworkStatus : Swift.String {
  case poor
  case good
  case disConnected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : IdentifySDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : IdentifySDK.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [IdentifySDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: IdentifySDK.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: IdentifySDK.NFCPassportReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public func IdentifyWebRequest(url: Swift.String, method: IdentifySDK.HTTPMethod = .get, parameters: IdentifySDK.Parameters = [:], headers: IdentifySDK.HTTPHeaders = ["Content-Type":"application/json"]) -> Foundation.URLRequest?
public func IdentifyWebRequestOLD(url: Swift.String, method: IdentifySDK.HttpMethod = .get, parameters: [Swift.String : Any] = [:], headers: [Swift.String : Swift.String] = [:]) -> Foundation.URLRequest
public enum HttpMethod : Swift.String {
  case get, post, head, put, delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.URLRequest {
  public func data(completion: @escaping ((IdentifySDK.HttpResponse) -> Swift.Void))
  public func json<T>(_ type: T.Type, completion: @escaping ((T?, IdentifySDK.HttpResponse) -> Swift.Void)) where T : Swift.Decodable
}
@_hasMissingDesignatedInitializers public class HttpResponse {
  public var original: Foundation.HTTPURLResponse?
  public var data: Foundation.Data?
  public var error: (any Swift.Error)?
  public var success: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : IdentifySDK.DataGroup {
  public var securityInfos: [IdentifySDK.SecurityInfo] {
    get
  }
  @objc deinit
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: IdentifySDK.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> IdentifySDK.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> IdentifySDK.ASN1Item
  public func test()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class IdentifyManager {
  public var kycIsCompleted: Swift.Bool
  public var queueStatsInfo: (order: Swift.String, min: Swift.String)
  public var subRejectedStatus: Swift.Bool
  public static let shared: IdentifySDK.IdentifyManager
  public var userToken: Swift.String
  public var nfcManager: IdentifySDK.SDKNfcReader
  public var passportReader: IdentifySDK.PassportReader
  public var livenessRandomOrder: [Swift.Int]?
  public var sdkFrontInfo: IdentifySDK.FrontIdInfo
  public var sdkBackInfo: IdentifySDK.BackIdInfo
  public var sdkNfcInfo: IdentifySDK.IdentifyCard
  public var webRTCClient: IdentifySDK.WebRTCClient!
  public var sdkSocketActions: IdentifySDK.SDKCallActions?
  public var socket: Starscream.WebSocket!
  weak public var delegate: (any IdentifySDK.IdentifyListenerDelegate)?
  weak public var appListenerDelegate: (any IdentifySDK.IdentifyManagerListener)?
  weak public var socketMessageListener: (any IdentifySDK.SDKSocketListener)?
  public var loginModuleController: UIKit.UIViewController
  public var selfieModuleController: UIKit.UIViewController
  public var idCardModuleController: UIKit.UIViewController
  public var nfcModuleController: UIKit.UIViewController
  public var livenessModuleController: UIKit.UIViewController
  public var videoRecorderModuleController: UIKit.UIViewController
  public var signatureModuleController: UIKit.UIViewController
  public var speechModuleController: UIKit.UIViewController
  public var addressModuleController: UIKit.UIViewController
  public var liveStreamModuleController: UIKit.UIViewController
  public var thankYouViewController: UIKit.UIViewController
  public var prepareViewController: UIKit.UIViewController
  public var modulesControllersArray: [UIKit.UIViewController]
  public var manipulatedModulesControllersArray: [UIKit.UIViewController]
  public var moduleStepOrder: Swift.Int
  public var mrzBirthDay: Swift.String
  public var mrzDocNo: Swift.String
  public var mrzValidDate: Swift.String
  public var face1Maps: [Swift.Double]
  public var face2Maps: [Swift.Double]
  public var connectToSignLang: Swift.Bool
  public var allowedNfcMaxErrorCount: Swift.Int
  public var allowedComparisonErroCount: Swift.Int
  public var allowedCardType: [IdentifySDK.CardType]
  public var selectedCardType: IdentifySDK.CardType?
  public var isSelfIdent: Swift.Bool
  public var useKpsData: Swift.Bool
  public var isSelfieIdent: Swift.Bool
  public var jailBreakStatus: Swift.Bool
  public var sdkLang: IdentifySDK.SDKLang?
  public var showBigCustomerCam: Swift.Bool
  public var nfcMsgHandler: ((IdentifySDK.NFCViewDisplayMessage) -> Swift.String)?
  public var timeoutIntervalForRequest: Swift.Double?
  public var timeoutIntervalForResource: Swift.Double
  public var isAlreadyShowingReConnectScreen: Swift.Bool
  public var needSpeedTest: Swift.Bool?
  public var selfieComparisonCount: Swift.Int
  public var nfcComparisonCount: Swift.Int
  public var tryedSelfieComparisonCount: Swift.Int
  public var tryedNfcComparisonCount: Swift.Int
  @objc deinit
  public func getVersion() -> Swift.String
  public func setSDKLang(lang: IdentifySDK.SDKLang? = .eng)
  public func setupSDK(identId: Swift.String, baseApiUrl: Swift.String, networkOptions: IdentifySDK.SDKNetworkOptions, kpsData: IdentifySDK.SDKKpsData?, identCardType: [IdentifySDK.CardType]? = [.idCard, .passport, .oldSchool], signLangSupport: Swift.Bool, nfcMaxErrorCount: Swift.Int, logLevel: IdentifySDK.SDKLogLevel? = .all, bigCustomerCam: Swift.Bool? = false, selectedModules: [IdentifySDK.SdkModules] = [], idCardLang: IdentifySDK.IDLang? = .TR, needCertForNfc: Swift.Bool? = false, callback: @escaping (Starscream.WebSocket?, IdentifySDK.RoomResponse, IdentifySDK.SDKWebError?) -> ())
  public func startSpeedTest(repeatCount: Swift.Int? = 1, callBack: @escaping (_ connectionStatus: IdentifySDK.SDKNetworkStatus, _ kbPerSec: CoreFoundation.CGFloat) -> (Swift.Void))
  public func getNextLivenessTest(callBack: @escaping (_ nextStep: IdentifySDK.LivenessTestStep?, _ completed: Swift.Bool?) -> ())
  public func quitSDK(callback: @escaping (UIKit.UIViewController) -> ())
  public func getNextModule(callback: @escaping (UIKit.UIViewController) -> ())
  public func reconnectToSocket(callback: @escaping (Starscream.WebSocket) -> ())
  public func startRemoteNFC(birthDate: Swift.String, validDate: Swift.String, docNo: Swift.String)
  public func startNFC(callback: @escaping (IdentifySDK.IdentifyCard?, IdentifySDK.AutoIdentStatus, IdentifySDK.BoolResponse, (any Swift.Error)?) -> ())
  public func sendSpeechStatus(isCompleted: Swift.Bool?)
  public func sendPreparetatus(isCompleted: Swift.Bool?)
  public func twoFacesCompare(callback: @escaping (Swift.Double, Swift.Bool, [UIKit.UIImage], (any Swift.Error)?) -> ())
  public func startBackIdOcr(frontImg: UIKit.UIImage, callback: @escaping (IdentifySDK.BackIdInfo, IdentifySDK.SDKError?) -> ())
  public func startPassportMrzKey(frontImg: UIKit.UIImage, cominData: IdentifySDK.FrontIdInfo, callback: @escaping (IdentifySDK.FrontIdInfo, IdentifySDK.SDKError?) -> ())
  public func startFrontIdOcr(frontImg: UIKit.UIImage, callback: @escaping (IdentifySDK.FrontIdInfo, IdentifySDK.SDKError?) -> ())
  public func checkAutoIdentStatus() -> IdentifySDK.AutoIdentStatus
  public func detectHumanFace(comingPhoto: UIKit.UIImage, callback: @escaping (Swift.Bool) -> ())
  public func uploadAddressInfo(invoicePhoto: UIKit.UIImage, addressText: Swift.String, callback: @escaping (Swift.Bool, IdentifySDK.SDKWebError?) -> ())
  public func uploadIdPhoto(idPhoto: UIKit.UIImage, selfieType: IdentifySDK.OCRType = .frontId, callback: @escaping (IdentifySDK.BoolResponse) -> ())
  public func upload5SecVideo(videoData: Foundation.Data, callback: @escaping (IdentifySDK.BoolResponse?, IdentifySDK.SDKWebError?) -> ())
  public func acceptCall(callback: @escaping (_ connected: Swift.Bool?, _ errMsg: IdentifySDK.SDKError?, _ sdpOk: Swift.Bool?) -> ())
  public func remoteCam() -> UIKit.UIView
  public func myCam() -> UIKit.UIView
  public func sendStep()
  public func speechCompleted()
  public func forceQuitSDK()
}
extension IdentifySDK.IdentifyManager : Starscream.WebSocketDelegate {
  public func websocketDidConnect(socket: any Starscream.WebSocketClient)
  public func websocketDidDisconnect(socket: any Starscream.WebSocketClient, error: (any Swift.Error)?)
  public func getSocketLogs() -> [IdentifySDK.SocketLog]
  public func websocketDidReceiveMessage(socket: any Starscream.WebSocketClient, text: Swift.String)
  public func websocketDidReceiveData(socket: any Starscream.WebSocketClient, data: Foundation.Data)
  public func smsVerification(tan: Swift.String, callback: @escaping (Swift.Bool) -> ())
  public func sendImOnline(socket: any Starscream.WebSocketClient)
}
public enum IDLang {
  case TR
  case AZ
  case OTHER
  public static func == (a: IdentifySDK.IDLang, b: IdentifySDK.IDLang) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: IdentifySDK.LogLevel = .error, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  public func readPassport(mrzKey: Swift.String, tags: [IdentifySDK.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((IdentifySDK.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (IdentifySDK.NFCPassportModel?, IdentifySDK.NFCPassportReaderError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension IdentifySDK.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
public typealias AFDataResponse<Success> = IdentifySDK.DataResponse<Success, IdentifySDK.AFError>
public typealias AFDownloadResponse<Success> = IdentifySDK.DownloadResponse<Success, IdentifySDK.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension IdentifySDK.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension IdentifySDK.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> IdentifySDK.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> IdentifySDK.DataResponse<NewSuccess, any Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> IdentifySDK.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> IdentifySDK.DataResponse<Success, any Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension IdentifySDK.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension IdentifySDK.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> IdentifySDK.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> IdentifySDK.DownloadResponse<NewSuccess, any Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> IdentifySDK.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> IdentifySDK.DownloadResponse<Success, any Swift.Error> where NewFailure : Swift.Error
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WebRTCClient : ObjectiveC.NSObject, WebRTC.RTCPeerConnectionDelegate, WebRTC.RTCVideoViewDelegate, WebRTC.RTCDataChannelDelegate {
  public var isConnected: Swift.Bool {
    get
  }
  public func localVideoView() -> UIKit.UIView
  public func remoteVideoView() -> UIKit.UIView
  @objc deinit
  public func setupLocalViewFrame(frame: CoreFoundation.CGRect)
  public func setupRemoteViewFrame(frame: CoreFoundation.CGRect)
  public func switchCameraPosition()
}
extension IdentifySDK.WebRTCClient {
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange stateChanged: WebRTC.RTCSignalingState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceConnectionState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didAdd stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didGenerate candidate: WebRTC.RTCIceCandidate)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didOpen dataChannel: WebRTC.RTCDataChannel)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove candidates: [WebRTC.RTCIceCandidate])
  @objc dynamic public func peerConnectionShouldNegotiate(_ peerConnection: WebRTC.RTCPeerConnection)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceGatheringState)
}
extension IdentifySDK.WebRTCClient {
  public func calculateLocalSize()
  public func calculateRemoteSize()
  @objc dynamic public func videoView(_ videoView: any WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreFoundation.CGSize)
}
extension IdentifySDK.WebRTCClient {
  @objc dynamic public func dataChannel(_ dataChannel: WebRTC.RTCDataChannel, didReceiveMessageWith buffer: WebRTC.RTCDataBuffer)
  @objc dynamic public func dataChannelDidChangeState(_ dataChannel: WebRTC.RTCDataChannel)
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : IdentifySDK.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: IdentifySDK.Session, completion: @escaping (Swift.Result<Self.Credential, any Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: any Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: IdentifySDK.AuthenticationError, b: IdentifySDK.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : IdentifySDK.RequestInterceptor where AuthenticatorType : IdentifySDK.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: IdentifySDK.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: IdentifySDK.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: IdentifySDK.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: IdentifySDK.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  public func retry(_ request: IdentifySDK.Request, for session: IdentifySDK.Session, dueTo error: any Swift.Error, completion: @escaping (IdentifySDK.RetryResult) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SocketLog {
  public var socketType: IdentifySDK.SocketMsgType?
  public var socketMsg: Swift.String?
  @objc deinit
}
public enum SocketMsgType {
  case incoming
  case outgoing
  public static func == (a: IdentifySDK.SocketMsgType, b: IdentifySDK.SocketMsgType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class IdentifyOCRManager {
  public func setNewPhotoForOCR(image: UIKit.UIImage) -> UIKit.UIImage
  @objc deinit
}
extension IdentifySDK.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: IdentifySDK.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : IdentifySDK.EventMonitor {
  final public func requestDidResume(_ request: IdentifySDK.Request)
  final public func requestDidSuspend(_ request: IdentifySDK.Request)
  final public func requestDidCancel(_ request: IdentifySDK.Request)
  final public func requestDidFinish(_ request: IdentifySDK.Request)
  final public func request(_ request: IdentifySDK.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: IdentifySDK.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: IdentifySDK.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: IdentifySDK.Request, didCompleteTask task: Foundation.URLSessionTask, with error: IdentifySDK.AFError?)
  @objc deinit
}
extension Foundation.URLSessionConfiguration : IdentifySDK.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension IdentifySDK.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
  public static var ephemeral: Foundation.URLSessionConfiguration {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: IdentifySDK.CertificateType, b: IdentifySDK.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [IdentifySDK.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
extension Foundation.URLRequest {
  public var method: IdentifySDK.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
extension IdentifySDK.Request.State : Swift.Equatable {}
extension IdentifySDK.Request.State : Swift.Hashable {}
extension IdentifySDK.Request.ResponseDisposition : Swift.Equatable {}
extension IdentifySDK.Request.ResponseDisposition : Swift.Hashable {}
extension IdentifySDK.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension IdentifySDK.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
extension IdentifySDK.UploadImgType : Swift.Equatable {}
extension IdentifySDK.UploadImgType : Swift.Hashable {}
extension IdentifySDK.UploadImgType : Swift.RawRepresentable {}
extension IdentifySDK.OCRType : Swift.Equatable {}
extension IdentifySDK.OCRType : Swift.Hashable {}
extension IdentifySDK.OCRType : Swift.RawRepresentable {}
extension IdentifySDK.AppType : Swift.Equatable {}
extension IdentifySDK.AppType : Swift.Hashable {}
extension IdentifySDK.AppType : Swift.RawRepresentable {}
extension IdentifySDK.SDKType : Swift.Equatable {}
extension IdentifySDK.SDKType : Swift.Hashable {}
extension IdentifySDK.SDKType : Swift.RawRepresentable {}
extension IdentifySDK.HostType : Swift.Equatable {}
extension IdentifySDK.HostType : Swift.Hashable {}
extension IdentifySDK.HostType : Swift.RawRepresentable {}
extension IdentifySDK.SdkModules : Swift.Equatable {}
extension IdentifySDK.SdkModules : Swift.Hashable {}
extension IdentifySDK.SdkModules : Swift.RawRepresentable {}
extension IdentifySDK.SelfieTypes : Swift.Equatable {}
extension IdentifySDK.SelfieTypes : Swift.Hashable {}
extension IdentifySDK.SelfieTypes : Swift.RawRepresentable {}
extension IdentifySDK.AppQuitType : Swift.Equatable {}
extension IdentifySDK.AppQuitType : Swift.Hashable {}
extension IdentifySDK.AppQuitType : Swift.RawRepresentable {}
extension IdentifySDK.SDKLogLevel : Swift.Equatable {}
extension IdentifySDK.SDKLogLevel : Swift.Hashable {}
extension IdentifySDK.SDKLogLevel : Swift.RawRepresentable {}
extension IdentifySDK.VerificationCardType : Swift.Equatable {}
extension IdentifySDK.VerificationCardType : Swift.Hashable {}
extension IdentifySDK.VerificationCardType : Swift.RawRepresentable {}
extension IdentifySDK.SDKLang : Swift.Equatable {}
extension IdentifySDK.SDKLang : Swift.Hashable {}
extension IdentifySDK.SDKLang : Swift.RawRepresentable {}
extension IdentifySDK.CardType : Swift.Equatable {}
extension IdentifySDK.CardType : Swift.Hashable {}
extension IdentifySDK.CardType : Swift.RawRepresentable {}
extension IdentifySDK.LivenessTestStep : Swift.Equatable {}
extension IdentifySDK.LivenessTestStep : Swift.Hashable {}
extension IdentifySDK.LivenessTestStep : Swift.RawRepresentable {}
extension IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension IdentifySDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
extension IdentifySDK.PassportAuthenticationStatus : Swift.Equatable {}
extension IdentifySDK.PassportAuthenticationStatus : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.Expression : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.Expression : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.Expression : Swift.RawRepresentable {}
extension IdentifySDK.FaceImageInfo.EyeColor : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.EyeColor : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.EyeColor : Swift.RawRepresentable {}
extension IdentifySDK.FaceImageInfo.FaceImageType : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.FaceImageType : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.FaceImageType : Swift.RawRepresentable {}
extension IdentifySDK.FaceImageInfo.Features : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.Features : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.Features : Swift.RawRepresentable {}
extension IdentifySDK.FaceImageInfo.HairColor : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.HairColor : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.HairColor : Swift.RawRepresentable {}
extension IdentifySDK.FaceImageInfo.ImageColorSpace : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.ImageColorSpace : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.ImageColorSpace : Swift.RawRepresentable {}
extension IdentifySDK.FaceImageInfo.ImageDataType : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.ImageDataType : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.ImageDataType : Swift.RawRepresentable {}
extension IdentifySDK.FaceImageInfo.SourceType : Swift.Equatable {}
extension IdentifySDK.FaceImageInfo.SourceType : Swift.Hashable {}
extension IdentifySDK.FaceImageInfo.SourceType : Swift.RawRepresentable {}
extension IdentifySDK.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension IdentifySDK.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension IdentifySDK.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension IdentifySDK.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DocTypeEnum : Swift.RawRepresentable {}
extension IdentifySDK.PACEMappingType : Swift.Equatable {}
extension IdentifySDK.PACEMappingType : Swift.Hashable {}
extension IdentifySDK.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension IdentifySDK.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension IdentifySDK.LogLevel : Swift.Equatable {}
extension IdentifySDK.LogLevel : Swift.Hashable {}
extension IdentifySDK.LogLevel : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.DeflateRequestCompressor.DuplicateHeaderBehavior : Swift.Equatable {}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IdentifySDK.DeflateRequestCompressor.DuplicateHeaderBehavior : Swift.Hashable {}
extension IdentifySDK.URLEncoding.Destination : Swift.Equatable {}
extension IdentifySDK.URLEncoding.Destination : Swift.Hashable {}
extension IdentifySDK.URLEncoding.BoolEncoding : Swift.Equatable {}
extension IdentifySDK.URLEncoding.BoolEncoding : Swift.Hashable {}
extension IdentifySDK.JSONEncoding.Error : Swift.Equatable {}
extension IdentifySDK.JSONEncoding.Error : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.DataGroupId : Swift.RawRepresentable {}
extension IdentifySDK.SDKNetworkStatus : Swift.Equatable {}
extension IdentifySDK.SDKNetworkStatus : Swift.Hashable {}
extension IdentifySDK.SDKNetworkStatus : Swift.RawRepresentable {}
extension IdentifySDK.HttpMethod : Swift.Equatable {}
extension IdentifySDK.HttpMethod : Swift.Hashable {}
extension IdentifySDK.HttpMethod : Swift.RawRepresentable {}
extension IdentifySDK.IDLang : Swift.Equatable {}
extension IdentifySDK.IDLang : Swift.Hashable {}
extension IdentifySDK.AuthenticationError : Swift.Equatable {}
extension IdentifySDK.AuthenticationError : Swift.Hashable {}
extension IdentifySDK.SocketMsgType : Swift.Equatable {}
extension IdentifySDK.SocketMsgType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension IdentifySDK.CertificateItem : Swift.RawRepresentable {}
